{"name":"tmix-security","tagline":"Extend backend security into a frontend AngularJS application","body":"# tmix-security\r\n\r\nThe tmix-security provider is intended to extend backend security into an AngularJS application. It shouldn't replace backend security since AJAX requests can be altered outside the application--it should improve the user experience by making the UI security-aware.\r\n\r\n\r\n\r\n### Install\r\n\r\nAdd to your project with `bower install tmix-security --save`.\r\n\r\n> Note: during development it may be helpful to turn on debugging messages with `tmixSecurity.turnOnDebugging()`.\r\n\r\n\r\n\r\n### Examples\r\n\r\nThe following examples should help you have tmix-security running quickly:\r\n\r\n- [Control Routes (The Easy Way)](#example-control-routes-the-easy-way)\r\n- [Control Routes (The Advanced Way)](#example-control-routes-the-advanced-way)\r\n- [Use `isAuthorized` in a Controller](#example-use-isauthorized-in-a-controller)\r\n- [Use Permissions in a Controller](#example-use-permissions-in-a-controller)\r\n- [Use One Set of Permissions Throughout Application](#example-use-one-set-of-permissions-throughout-application)\r\n- [Set Custom, Static Permissions](#example-set-custom-static-permissions)\r\n- [Changing Permissions, Clearing the Cache](#example-changing-permissions-clearing-the-cache)\r\n\r\n\r\n### Example: Control Routes (The Easy Way)\r\n\r\n1. Create a service that returns an array of allowed routes. For example:\r\n```\r\n[\"/\", \"/route1\", \"/route2/:id\"]\r\n```\r\n\r\n2. Include the tmix-security provider and set the `resolve` and `permissions` property on each route you want to secure:\r\n```\r\nangular.module('exampleApp').config(function($routeProvider, tmixSecurityProvider) {\r\n    $routeProvider\r\n        .when('/', {\r\n            templateUrl: 'views/templates.html',\r\n            controller: 'TemplatesCtrl',\r\n            resolve: tmixSecurityProvider.authorizeOrRedirect,\r\n            permissions: 'http://example.com/api/Permissions'\r\n        })\r\n        .when('/module/:moduleId', {\r\n            templateUrl: 'views/module.html',\r\n            controller: 'ModuleCtrl',\r\n            resolve: tmixSecurityProvider.authorizeOrRedirect,\r\n            permissions: 'http://example.com/api/Permissions'\r\n        })\r\n        .when('/insecure-route', {\r\n            templateUrl: 'views/insecure.html'         \r\n        })\r\n        .when('/forbidden', {\r\n            templateUrl: 'views/forbidden.html'         \r\n        })\r\n        ...\r\n```\r\n\r\nNote: when `permissions` is a string, as in the example, SecurityProvider expects it to be a URL and will attempt to retrieve a permissions object using AJAX; this request will be cached and subsequent requests to the same URL will used the cached response. \r\n\r\n3. Don't forget to setup a `forbidden` route and view for unauthorized requests to redirect to.\r\n\r\n\r\n\r\n### Example: Control Routes (The Advanced Way)\r\n\r\n1. Create a service that returns a permissions object. E.g.:\r\n```\r\n{\r\n   userName: \"John Smith\",\r\n   canView: [1, 2, 3],\r\n   canEdit: [1, 2],\r\n   canDelete: [1]\r\n}\r\n```\r\n\r\n2. Include the tmix-security provider and set the `resolve` and `permissions` property on each route you want to secure (see example above).\r\n\r\n3. Setup a custom authorization function that will control all routes:\r\n```\r\nangular.module('exampleApp').config(function($routeProvider, tmixSecurityProvider) { \r\n    // notice that here we use the full name, tmix-security provider\r\n    tmixSecurityProvider.setCustomAuthorization(function(query, permissions, route, routeParams){\r\n        return permissions.canView.indexOf(query) !== -1;\r\n    });\r\n    $routeProvider\r\n        .when('/', {\r\n    ...\r\n```\r\n\r\n4. __Alternately__, setup a custom authorization function on a route:\r\n```\r\nangular.module('exampleApp').config(function($routeProvider, tmixSecurityProvider) {\r\n    $routeProvider\r\n        .when('/view/:id', {\r\n            templateUrl: 'views/templates.html',\r\n            controller: 'TemplatesCtrl',\r\n            resolve: tmixSecurityProvider.authorizeOrRedirect, \r\n            permissions: 'http://example.com/api/Permissions',\r\n            customAuthorization: function(query, permissions, route, routeParams){\r\n                return permissions.canView.indexOf(routeParams.id) !== -1;\r\n            });\r\n        })\r\n        .when('/edit/:id', {\r\n            templateUrl: 'views/module.html',\r\n            controller: 'ModuleCtrl',\r\n            resolve: tmixSecurityProvider.authorizeOrRedirect,\r\n            permissions: 'http://example.com/api/Permissions',\r\n            customAuthorization: function(query, permissions, route, routeParams){\r\n                return permissions.canEdit.indexOf(routeParams.id) !== -1;\r\n            })\r\n        });\r\n   });\r\n```\r\n\r\n\r\n\r\n### Example: Use `isAuthorized` in a Controller\r\n\r\nThe tmix-security provider allows access to its authorization methods from within the controller. Use `isAuthorized` if you have either a simple authorization scheme (e.g. is the current route allowed?) or some specific authorization scheme application-wide. This method also abstracts away the caching of permissions and type-checking for a returned promise.\r\n\r\nA simple example:\r\n```\r\n// for a permissions object returned like {canView: [23, 24, 25], canEdit: ...}\r\nangular.module('exampleApp').controller('ExampleCtrl', function ($scope, $route, tmixSecurity) {\r\n    tmixSecurity.isAuthorized('canView/23');\r\n});\r\n```\r\n\r\nThe method prioritizes authorization as follows:\r\n\r\n1. check for custom route authorization; this is a function assigned to a route like:\r\n```\r\n.when('/some/:someField/an-action', {\r\n    ...\r\n    resolve: ...,\r\n    customAuthorization: function(query, permissions, route, routeParams){ ... },\r\n})\r\n```\r\n\r\n2. check for global custom authorization; this is a function defined like:\r\n```\r\ntmixSecurityProvider.setCustomAuthorization(function(query, permissions, route, routeParams){\r\n    ...\r\n});\r\n```\r\n\r\n3. default authorization; the current route is checked against an array of routes in permissions:\r\n```\r\n// assume we are in '/some-route' the permissions object is ['/', '/some-route', ...]\r\ntmixSecurity.isAuthorized() === true;\r\n```\r\n\r\n4. xpath-like search through the permissions object\r\n```\r\n// assume permissions like {GET: {route: [1, 2, 3]}}\r\ntmixSecurity.isAuthorized('GET/route/1') === true;\r\ntmixSecurity.isAuthorized('GET#route#1', '#') === true;\r\n```\r\n\r\n5. pass in a function:\r\n```\r\ntmixSecurity.isAuthorized(function(query, permissions, route, routeParams){\r\n    ...\r\n});\r\n```\r\n\r\n\r\n\r\n### Example: Use Permissions in a Controller\r\n\r\n1. Once permissions are set on the route, you can access permissions from within controllers (without a parameter, `getPermissions` will retrieve permissions for the current route, e.g. if the route's permissions field is a string, it will assume it is a URL--if not, it will assume it is a permissions object):\r\n```\r\nangular.module('exampleApp').controller('ExampleCtrl', function ($scope, tmixSecurity) {\r\n    var permissions = tmixSecurity.getPermissions().then(function(permissions){\r\n        ...\r\n    }); \r\n});\r\n```\r\n\r\n2. If you set a parameter, you can retrieve the permissions from a different route:\r\n```\r\nsomething.permissions = tmixSecurity.getPermissions('/some-other-route').then(function(permissions){\r\n    ...\r\n}); \r\n```\r\n\r\n3. If the permissions have already been cached, e.g. in a previous `authorizeOrRedirect()`, you can use a getPermissionsSync() to return the results directly, no promise:\r\n```\r\nvar permissions = tmixSecurity.getPermissionsSync();\r\n```\r\n\r\n\r\n\r\n### Example: Use One Set of Permissions Throughout Application\r\n\r\n1. In cases where the permissions object is the same throughout the entire application, setup a default permissions object. E.g.:\r\n```\r\nangular.module('exampleApp').config(function($routeProvider, tmixSecurityProvider) { \r\n    // use a URL...\r\n    tmixSecurityProvider.setDefaultPermissions('http://www.example.com/api/permissions');\r\n    // ... or use a static object\r\n    tmixSecurityProvider.setDefaultPermissions({canEdit: [1, 2, 3]});\r\n```\r\n\r\n2. Now you can skip the permissions object when securing routes:\r\n```\r\n        .when('/edit/:id', {\r\n            templateUrl: 'views/module.html',\r\n            controller: 'ModuleCtrl',\r\n            resolve: tmixSecurityProvider.authorizeOrRedirect\r\n            // no permissions declared here; will use default\r\n        });\r\n```\r\n\r\n3. Also, you can call `getPermissions()` without a route from within the controller:\r\n```\r\nangular.module('exampleApp').controller('ExampleCtrl', function ($scope, tmixSecurity) {\r\n    var permissions = tmixSecurity.getPermissions().then(function(permissions){ // notice no route is needed when default permissions are set\r\n        ...\r\n    }); \r\n});\r\n```\r\n\r\n\r\n\r\n### Example: Redirect to a Custom URL\r\n\r\nBy default, tmix-security provider will redirect to `/forbidden` when a user does not have authorization to a route. To change the redirect route, add a `deniedRoute` property on the route in question:\r\n```\r\n        .when('/edit/:id', {\r\n            templateUrl: 'views/module.html',\r\n            controller: 'ModuleCtrl',\r\n            resolve: tmixSecurityProvider.authorizeOrRedirect,\r\n            deniedRoute: '/custom-access-denied-route'\r\n        });\r\n```\r\n\r\n\r\n\r\n### Example: Set Custom, Static Permissions\r\n\r\nIf `permissions` is an array or object, tmix-security provider will use this instance as the route's permissions:\r\n```\r\n        .when('/', {\r\n            ...\r\n            resolve: tmixSecurityProvider.authorizeOrRedirect,\r\n            permissions: ['/', '/route1', '/route2']\r\n        })\r\n```\r\n\r\n\r\n\r\n### Example: Changing Permissions, Clearing the Cache\r\n\r\ntmix-security caches permissions retrieved from URLs; if your frontend application changes the permissions object and you want to re-retrieve permissions, clear the URL cache with:\r\n```\r\n\ttmixSecurity.clearPermissionsCache();\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}